<?xml version = "1.0" encoding = "utf-8"?>
<project name = "Change Management" default = "dist" basedir = ".">
    <property environment="env"/> <property name="protege.home"
                                            value="${env.PROTEGE_HOME}"/>
    
    <property name = "junit.src"       location = "./junit/src"/>
    <property name = "build"           location = "./build"/>
    <property name = "manage.classes"  location = "${build}/classes"/>
    <property name = "junit.classes"   location = "${build}/junit.classes"/>
    
    <property name = "plugin.dist"     value = "edu.stanford.smi.protegex.changes"/>
    <property name = "plugin.dir"      location = "${build}/plugins/${plugin.dist}"/>
    <property name = "manage.jar"      location = "${plugin.dir}/change-management.jar"/>
    
    <property name = "distribution"    location = "${build}/change-management.zip"/>
    
    <property name = "plugin.manifest" location = "${build}/manifest.mf"/>
    
    <property name = "lib"             value = "./lib"/>
    <property name = "junit"           value = "./junit"/>
    
    
    <property name = "debug"           value = "true"/>
    
    <!-- 
         #  ********** Finding Protege Libraries. *************
         # 
         #  We are using an approach that allows developers to decide
         #  whether to hand copy the needed jars into the lib directory or
         #  to point them to a protege installation.
      -->
    
    <target name="useProtegeHome">
        <echo message="Using Protege Home = ${protege.home} to find protege jars"/>
        <property name="protege.lib" value="${protege.home}/protege.jar"/>
        <property name="owl.lib"     value="${protege.home}/plugins/edu.stanford.smi.protegex.owl/protege-owl.jar"/>
        <property name="rdf.lib"     value="${protege.home}/plugins/edu.stanford.smi.protegex.rdf_backend/rdf-backend.jar"/>
    </target>
    
    
    <target name = "checkProtegeLibs" depends="useProtegeHome">
        <condition property="libs.found">
            <and>
                <available file="${protege.lib}" type = "file"/>
                <available file="${owl.lib}" type = "file"/>
                <available file="${rdf.lib}" type = "file"/>
            </and>
        </condition>
        <path id = "project.classpath">    
            <pathelement location = "${protege.lib}"/>
            <pathelement location = "${owl.lib}"/>
            <pathelement location = "${rdf.lib}"/> 
            <pathelement location = "${lib}/icu4j.jar"/>
        </path>
        
    </target>
    
    <target name="checkProtegeLibsAndReport" depends="checkProtegeLibs"
            unless="libs.found">
        <echo message="Missing protege libraries.  You can either "/>
        <echo message="set the PROTEGE_HOME environment variable to a"/>
        <echo message="protege installation directory where the"/>
        <echo message="appropriate plugins have been installed or copy the"/>
        <echo message="needed jars into the lib directory"/>
        <echo message="The jar files in question are protege.jar, protege-owl.jar and rdf-backend.jar"/>
        <fail message="build aborted."/>
    </target>
    
    <!-- 
         #  ********** Finding Protege Libraries Done. *************
      -->
    
    
    <target name = "init">
        <tstamp>
            <format property="build.time" pattern="MM/dd/yyyy hh:mm aa"/>
        </tstamp>
        <mkdir dir = "${build}"/>
    </target>  
    
    <target name = "compile" depends = "init, checkProtegeLibsAndReport">
        <mkdir dir="${manage.classes}"/>
        <javac destdir="${manage.classes}"
               debug="${debug}">
            <src path = "model/src"/>
            <src path = "changesKbViewTab/src"/>
            <src path = "changesTab/src"/>
            <src path = "changeStats/src"/>
            <src path = "projectPlugin/src"/>
            <classpath refid = "project.classpath"/>
        </javac>
        
    </target>
    
    <target name = "manifests">
        <copy tofile="${plugin.manifest}" 
              file="changesTab/src/META-INF/MANIFEST.MF" 
              overwrite="true"/>
        <manifest file="${plugin.manifest}"
                  mode = "update">
            <attribute name="Built-By" value = "${user.name}"/>
            <attribute name="Build-Date" value = "${build.time}"/>
        </manifest>
    </target>
    
    <target name = "jar" depends = "compile,manifests">
        <mkdir dir="${plugin.dir}"/>
        <jar destfile = "${manage.jar}"
             manifest = "${plugin.manifest}"
             basedir = "${manage.classes}"/>
    </target>
    
    <target name = "dist" depends = "jar">
        <copy file = "${lib}/icu4j.jar" todir="${plugin.dir}"/>
        <copy file = "plugin.properties" todir = "${plugin.dir}"/>
        <copy todir = "${plugin.dir}/projects">
            <fileset dir="projects"/>
        </copy>
        <copy todir = "${plugin.dir}/doc">
            <fileset dir="./docs"/>
        </copy>
        <zip basedir = "${build}/plugins"
             destfile = "${distribution}"/>
    </target>
    
    <target name = "update" depends = "jar">
        <copy todir="${protege.home}/plugins/${plugin.dist}">
            <fileset dir="${plugin.dir}"
                     includes="*.jar"/>
        </copy>
    </target>
    
    <target name="compile.junit" depends="compile">
        <mkdir dir="${junit.classes}"/>
        <javac srcdir="${junit.src}" destdir="${junit.classes}" debug="${debug}">
            <classpath>
                <path refid="project.classpath"/>
                <pathelement location="${manage.classes}"/>
                <pathelement location="./lib/junit.jar"/>
            </classpath>
        </javac>
    </target>

    <target name = "junit"  depends="compile.junit, jar">
        <mkdir dir="${build}/projects"/>
        <copy todir="${build}/projects">
            <fileset dir="./junit/projects"/>
        </copy>
        <junit fork="true" haltonerror="true" haltonfailure="true"
               filtertrace="true"
               printsummary="true" 
        	   showoutput="false">
            <!-- <jvmarg value="-agentlib:jdwp=transport=dt_socket,address=8100,server=y,suspend=y"/> -->
            <jvmarg value="-Xmx800M"/>
            <classpath>
                <path refid="project.classpath"/>
                <pathelement location="${manage.jar}"/>
                <pathelement location="${junit.classes}"/>
                <pathelement location="./lib/junit.jar"/>
                <fileset  dir="${protege.home}/plugins/edu.stanford.smi.protegex.owl">
                    <include name="*.jar"/>
                </fileset>
                <fileset  dir="${protege.home}/plugins/edu.stanford.smi.protegex.rdf_backend">
                    <include name="*.jar"/>
                </fileset>
                
            </classpath>
            <batchtest>
              <fileset dir="${junit}/src">
                <include name="**/*Test.java"/>
              </fileset>
            </batchtest>
        </junit>
    </target>
    
    <target name = "install" depends = "dist">
        <unzip src="${distribution}"
               dest = "${protege.home}/plugins"
               overwrite = "true"/>
    </target>
    
    <target name = "clean">
        <delete dir = "${build}"/>
    </target>
    
</project>
