package edu.stanford.bmir.protegex.chao.ontologycomp.api.impl;

import java.util.ArrayList;
import java.util.Collection;

import edu.stanford.bmir.protegex.chao.ontologycomp.api.Ontology_Component;
import edu.stanford.bmir.protegex.chao.ontologycomp.api.Reviewer;
import edu.stanford.smi.protege.model.Cls;
import edu.stanford.smi.protege.model.Instance;
import edu.stanford.smi.protege.model.Slot;

/**
 * Generated by Protege (http://protege.stanford.edu). Source Class: Reviewer
 * 
 * @version generated on Wed Sep 09 18:24:11 PDT 2009
 */
public class DefaultReviewer extends DefaultUser implements Reviewer {

    public DefaultReviewer(Instance instance) {
        super(instance);
    }

    public DefaultReviewer() {
    }

    // Slot domainOfInterest

    @Override
    public Collection<Ontology_Component> getDomainOfInterest() {
        Collection protegeValues = getWrappedProtegeInstance().getOwnSlotValues(getDomainOfInterestSlot());
        Collection<Ontology_Component> values = new ArrayList<Ontology_Component>();
        Cls cls = getKnowledgeBase().getCls("Ontology_Component");
        for (Object object : protegeValues) {
            if (object instanceof Instance && ((Instance) object).hasType(cls)) {
                values.add(new DefaultOntology_Component((Instance) object));
            }
        }
        return values;
    }

    @Override
    public Slot getDomainOfInterestSlot() {
        final String name = "domainOfInterest";
        return getKnowledgeBase().getSlot(name);
    }

    @Override
    public boolean hasDomainOfInterest() {
        return hasSlotValues(getDomainOfInterestSlot());
    }

    @Override
    public void addDomainOfInterest(Ontology_Component newDomainOfInterest) {
        addSlotValue(getDomainOfInterestSlot(), newDomainOfInterest);
    }

    @Override
    public void removeDomainOfInterest(Ontology_Component oldDomainOfInterest) {
        removeSlotValue(getDomainOfInterestSlot(), oldDomainOfInterest);
    }

    @Override
    public void setDomainOfInterest(Collection<? extends Ontology_Component> newDomainOfInterest) {
        setSlotValues(getDomainOfInterestSlot(), newDomainOfInterest);
    }

    // Slot name

    @Override
    public String getName() {
        return (String) getWrappedProtegeInstance().getOwnSlotValue(getNameSlot());
    }

    @Override
    public Slot getNameSlot() {
        final String name = "name";
        return getKnowledgeBase().getSlot(name);
    }

    @Override
    public boolean hasName() {
        return hasSlotValues(getNameSlot());
    }

    @Override
    public void setName(String newName) {
        setSlotValue(getNameSlot(), newName);
    }

    // Slot pendingReview

    public Collection<Ontology_Component> getPendingReview() {
        Collection protegeValues = getWrappedProtegeInstance().getOwnSlotValues(getPendingReviewSlot());
        Collection<Ontology_Component> values = new ArrayList<Ontology_Component>();
        Cls cls = getKnowledgeBase().getCls("Ontology_Component");
        for (Object object : protegeValues) {
            if (object instanceof Instance && ((Instance) object).hasType(cls)) {
                values.add(new DefaultOntology_Component((Instance) object));
            }
        }
        return values;
    }

    public Slot getPendingReviewSlot() {
        final String name = "pendingReview";
        return getKnowledgeBase().getSlot(name);
    }

    public boolean hasPendingReview() {
        return hasSlotValues(getPendingReviewSlot());
    }

    public void addPendingReview(Ontology_Component newPendingReview) {
        addSlotValue(getPendingReviewSlot(), newPendingReview);
    }

    public void removePendingReview(Ontology_Component oldPendingReview) {
        removeSlotValue(getPendingReviewSlot(), oldPendingReview);
    }

    public void setPendingReview(Collection<? extends Ontology_Component> newPendingReview) {
        setSlotValues(getPendingReviewSlot(), newPendingReview);
    }

    // Slot watchedEntity

    @Override
    public Collection<Ontology_Component> getWatchedEntity() {
        Collection protegeValues = getWrappedProtegeInstance().getOwnSlotValues(getWatchedEntitySlot());
        Collection<Ontology_Component> values = new ArrayList<Ontology_Component>();
        Cls cls = getKnowledgeBase().getCls("Ontology_Component");
        for (Object object : protegeValues) {
            if (object instanceof Instance && ((Instance) object).hasType(cls)) {
                values.add(new DefaultOntology_Component((Instance) object));
            }
        }
        return values;
    }

    @Override
    public Slot getWatchedEntitySlot() {
        final String name = "watchedEntity";
        return getKnowledgeBase().getSlot(name);
    }

    @Override
    public boolean hasWatchedEntity() {
        return hasSlotValues(getWatchedEntitySlot());
    }

    @Override
    public void addWatchedEntity(Ontology_Component newWatchedEntity) {
        addSlotValue(getWatchedEntitySlot(), newWatchedEntity);
    }

    @Override
    public void removeWatchedEntity(Ontology_Component oldWatchedEntity) {
        removeSlotValue(getWatchedEntitySlot(), oldWatchedEntity);
    }

    @Override
    public void setWatchedEntity(Collection<? extends Ontology_Component> newWatchedEntity) {
        setSlotValues(getWatchedEntitySlot(), newWatchedEntity);
    }
}
