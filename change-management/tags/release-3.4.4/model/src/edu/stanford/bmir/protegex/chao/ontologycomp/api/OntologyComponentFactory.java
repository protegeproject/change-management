package edu.stanford.bmir.protegex.chao.ontologycomp.api;

import java.util.ArrayList;
import java.util.Collection;

import edu.stanford.bmir.protegex.chao.ontologycomp.api.impl.DefaultOntology_Class;
import edu.stanford.bmir.protegex.chao.ontologycomp.api.impl.DefaultOntology_Component;
import edu.stanford.bmir.protegex.chao.ontologycomp.api.impl.DefaultOntology_Individual;
import edu.stanford.bmir.protegex.chao.ontologycomp.api.impl.DefaultOntology_Property;
import edu.stanford.bmir.protegex.chao.ontologycomp.api.impl.DefaultReviewer;
import edu.stanford.bmir.protegex.chao.ontologycomp.api.impl.DefaultTimestamp;
import edu.stanford.bmir.protegex.chao.ontologycomp.api.impl.DefaultUser;
import edu.stanford.smi.protege.code.generator.wrapping.AbstractWrappedInstance;
import edu.stanford.smi.protege.code.generator.wrapping.OntologyJavaMappingUtil;
import edu.stanford.smi.protege.model.Cls;
import edu.stanford.smi.protege.model.Instance;
import edu.stanford.smi.protege.model.KnowledgeBase;
import edu.stanford.smi.protege.model.Slot;

/**
 * Generated by Protege (http://protege.stanford.edu).
 * 
 * @version generated on Mon Aug 18 21:08:59 GMT-08:00 2008
 */
public class OntologyComponentFactory {
    static {
        OntologyJavaMapping.initMap();
    }

    private KnowledgeBase kb;

    public OntologyComponentFactory(KnowledgeBase kb) {
        this.kb = kb;
    }

    // ***** Class Ontology_Class *****

    public Cls getOntology_ClassClass() {
        final String name = "Ontology_Class";
        return kb.getCls(name);
    }

    public Ontology_Class createOntology_Class(String name) {
        Cls cls = getOntology_ClassClass();
        Instance inst = cls.createDirectInstance(name);
        return new DefaultOntology_Class(inst);
    }

    public Ontology_Class getOntology_Class(String name) {
        return OntologyJavaMappingUtil.getSpecificObject(kb, kb.getInstance(name), Ontology_Class.class);
    }

    public Collection<Ontology_Class> getAllOntology_ClassObjects() {
        return getAllOntology_ClassObjects(false);
    }

    public Collection<Ontology_Class> getAllOntology_ClassObjects(boolean transitive) {
        Collection<Ontology_Class> result = new ArrayList<Ontology_Class>();
        final Cls cls = getOntology_ClassClass();
        for (Object element : transitive ? cls.getInstances() : cls.getDirectInstances()) {
            Instance inst = (Instance) element;
            result.add(OntologyJavaMappingUtil.getSpecificObject(kb, inst, Ontology_Class.class));
        }
        return result;
    }

    // ***** Class Ontology_Component *****

    public Cls getOntology_ComponentClass() {
        final String name = "Ontology_Component";
        return kb.getCls(name);
    }

    public Ontology_Component createOntology_Component(String name) {
        Cls cls = getOntology_ComponentClass();
        Instance inst = cls.createDirectInstance(name);
        return new DefaultOntology_Component(inst);
    }

    public Ontology_Component getOntology_Component(String name) {
        return OntologyJavaMappingUtil.getSpecificObject(kb, kb.getInstance(name), Ontology_Component.class);
    }

    public Collection<Ontology_Component> getAllOntology_ComponentObjects() {
        return getAllOntology_ComponentObjects(false);
    }

    public Collection<Ontology_Component> getAllOntology_ComponentObjects(boolean transitive) {
        Collection<Ontology_Component> result = new ArrayList<Ontology_Component>();
        final Cls cls = getOntology_ComponentClass();
        for (Object element : transitive ? cls.getInstances() : cls.getDirectInstances()) {
            Instance inst = (Instance) element;
            result.add(OntologyJavaMappingUtil.getSpecificObject(kb, inst, Ontology_Component.class));
        }
        return result;
    }

    // ***** Class Ontology_Individual *****

    public Cls getOntology_IndividualClass() {
        final String name = "Ontology_Individual";
        return kb.getCls(name);
    }

    public Ontology_Individual createOntology_Individual(String name) {
        Cls cls = getOntology_IndividualClass();
        Instance inst = cls.createDirectInstance(name);
        return new DefaultOntology_Individual(inst);
    }

    public Ontology_Individual getOntology_Individual(String name) {
        return OntologyJavaMappingUtil.getSpecificObject(kb, kb.getInstance(name), Ontology_Individual.class);
    }

    public Collection<Ontology_Individual> getAllOntology_IndividualObjects() {
        return getAllOntology_IndividualObjects(false);
    }

    public Collection<Ontology_Individual> getAllOntology_IndividualObjects(boolean transitive) {
        Collection<Ontology_Individual> result = new ArrayList<Ontology_Individual>();
        final Cls cls = getOntology_IndividualClass();
        for (Object element : transitive ? cls.getInstances() : cls.getDirectInstances()) {
            Instance inst = (Instance) element;
            result.add(OntologyJavaMappingUtil.getSpecificObject(kb, inst, Ontology_Individual.class));
        }
        return result;
    }

    // ***** Class Ontology_Property *****

    public Cls getOntology_PropertyClass() {
        final String name = "Ontology_Property";
        return kb.getCls(name);
    }

    public Ontology_Property createOntology_Property(String name) {
        Cls cls = getOntology_PropertyClass();
        Instance inst = cls.createDirectInstance(name);
        return new DefaultOntology_Property(inst);
    }

    public Ontology_Property getOntology_Property(String name) {
        return OntologyJavaMappingUtil.getSpecificObject(kb, kb.getInstance(name), Ontology_Property.class);
    }

    public Collection<Ontology_Property> getAllOntology_PropertyObjects() {
        return getAllOntology_PropertyObjects(false);
    }

    public Collection<Ontology_Property> getAllOntology_PropertyObjects(boolean transitive) {
        Collection<Ontology_Property> result = new ArrayList<Ontology_Property>();
        final Cls cls = getOntology_PropertyClass();
        for (Object element : transitive ? cls.getInstances() : cls.getDirectInstances()) {
            Instance inst = (Instance) element;
            result.add(OntologyJavaMappingUtil.getSpecificObject(kb, inst, Ontology_Property.class));
        }
        return result;
    }

    // ***** Class Reviewer *****

    public Cls getReviewerClass() {
        final String name = "Reviewer";
        return kb.getCls(name);
    }

    public Reviewer createReviewer(String name) {
        Cls cls = getReviewerClass();
        Instance inst = cls.createDirectInstance(name);
        return new DefaultReviewer(inst);
    }

    public Reviewer getReviewer(String name) {
        return OntologyJavaMappingUtil.getSpecificObject(kb, kb.getInstance(name), Reviewer.class);
    }

    public Collection<Reviewer> getAllReviewerObjects() {
        return getAllReviewerObjects(false);
    }

    public Collection<Reviewer> getAllReviewerObjects(boolean transitive) {
        Collection<Reviewer> result = new ArrayList<Reviewer>();
        final Cls cls = getReviewerClass();
        for (Object element : transitive ? cls.getInstances() : cls.getDirectInstances()) {
            Instance inst = (Instance) element;
            result.add(OntologyJavaMappingUtil.getSpecificObject(kb, inst, Reviewer.class));
        }
        return result;
    }

    // ***** Class Timestamp *****

    public Cls getTimestampClass() {
        final String name = "Timestamp";
        return kb.getCls(name);
    }

    public Timestamp createTimestamp(String name) {
        Cls cls = getTimestampClass();
        Instance inst = cls.createDirectInstance(name);
        return new DefaultTimestamp(inst);
    }

    public Timestamp getTimestamp(String name) {
        return OntologyJavaMappingUtil.getSpecificObject(kb, kb.getInstance(name), Timestamp.class);
    }

    public Collection<Timestamp> getAllTimestampObjects() {
        return getAllTimestampObjects(false);
    }

    public Collection<Timestamp> getAllTimestampObjects(boolean transitive) {
        Collection<Timestamp> result = new ArrayList<Timestamp>();
        final Cls cls = getTimestampClass();
        for (Object element : transitive ? cls.getInstances() : cls.getDirectInstances()) {
            Instance inst = (Instance) element;
            result.add(OntologyJavaMappingUtil.getSpecificObject(kb, inst, Timestamp.class));
        }
        return result;
    }

    // ***** Class User *****

    public Cls getUserClass() {
        final String name = "User";
        return kb.getCls(name);
    }

    public User createUser(String name) {
        Cls cls = getUserClass();
        Instance inst = cls.createDirectInstance(name);
        return new DefaultUser(inst);
    }

    public User getUser(String name) {
        return OntologyJavaMappingUtil.getSpecificObject(kb, kb.getInstance(name), User.class);
    }

    public Collection<User> getAllUserObjects() {
        return getAllUserObjects(false);
    }

    public Collection<User> getAllUserObjects(boolean transitive) {
        Collection<User> result = new ArrayList<User>();
        final Cls cls = getUserClass();
        for (Object element : transitive ? cls.getInstances() : cls.getDirectInstances()) {
            Instance inst = (Instance) element;
            result.add(OntologyJavaMappingUtil.getSpecificObject(kb, inst, User.class));
        }
        return result;
    }

    // ***** Getter methods for slots *****

    public Slot getActionSlot() {
        final String name = "action";
        return kb.getSlot(name);
    }

    public Slot getAnnotatesSlot() {
        final String name = "annotates";
        return kb.getSlot(name);
    }

    public Slot getAssociatedAnnotationsSlot() {
        final String name = "associatedAnnotations";
        return kb.getSlot(name);
    }

    public Slot getApplyToSlot() {
        final String name = "applyTo";
        return kb.getSlot(name);
    }

    public Slot getChangesSlot() {
        final String name = "changes";
        return kb.getSlot(name);
    }

    public Slot getAssociatedPropertySlot() {
        final String name = "associatedProperty";
        return kb.getSlot(name);
    }

    public Slot getAuthorSlot() {
        final String name = "author";
        return kb.getSlot(name);
    }

    public Slot getBodySlot() {
        final String name = "body";
        return kb.getSlot(name);
    }

    public Slot getChanges_Slot_0Slot() {
        final String name = "changes_Slot_0";
        return kb.getSlot(name);
    }

    public Slot getChanges_Slot_1Slot() {
        final String name = "changes_Slot_1";
        return kb.getSlot(name);
    }

    public Slot getCommentSlot() {
        final String name = "comment";
        return kb.getSlot(name);
    }

    public Slot getContextSlot() {
        final String name = "context";
        return kb.getSlot(name);
    }

    public Slot getCreatedSlot() {
        final String name = "created";
        return kb.getSlot(name);
    }

    public Slot getCreationNameSlot() {
        final String name = "creationName";
        return kb.getSlot(name);
    }

    public Slot getCurrentNameSlot() {
        final String name = "currentName";
        return kb.getSlot(name);
    }

    public Slot getDateSlot() {
        final String name = "date";
        return kb.getSlot(name);
    }

    public Slot getDeletionNameSlot() {
        final String name = "deletionName";
        return kb.getSlot(name);
    }

    public Slot getDomainOfInterestSlot() {
        final String name = "domainOfInterest";
        return kb.getSlot(name);
    }

    public Slot getInverse_of_annotatesSlot() {
        final String name = "inverse_of_annotates";
        return kb.getSlot(name);
    }

    public Slot getModifiedSlot() {
        final String name = "modified";
        return kb.getSlot(name);
    }

    public Slot getNameSlot() {
        final String name = "name";
        return kb.getSlot(name);
    }

    public Slot getNewNameSlot() {
        final String name = "newName";
        return kb.getSlot(name);
    }

    public Slot getOldNameSlot() {
        final String name = "oldName";
        return kb.getSlot(name);
    }

    public Slot getPartOfCompositeChangeSlot() {
        final String name = "partOfCompositeChange";
        return kb.getSlot(name);
    }

    public Slot getSubChangesSlot() {
        final String name = "subChanges";
        return kb.getSlot(name);
    }

    public Slot getRelatedSlot() {
        final String name = "related";
        return kb.getSlot(name);
    }

    public Slot getSequenceSlot() {
        final String name = "sequence";
        return kb.getSlot(name);
    }

    public Slot getSubjectSlot() {
        final String name = "subject";
        return kb.getSlot(name);
    }

    public Slot getTimestampSlot() {
        final String name = "timestamp";
        return kb.getSlot(name);
    }

    public Slot getTitleSlot() {
        final String name = "title";
        return kb.getSlot(name);
    }

    public Slot getVoteValueSlot() {
        final String name = "voteValue";
        return kb.getSlot(name);
    }

    public Slot getWatchedBySlot() {
        final String name = "watchedBy";
        return kb.getSlot(name);
    }

    public Slot getWatchedEntitySlot() {
        final String name = "watchedEntity";
        return kb.getSlot(name);
    }

    public Slot getPendingReviewSlot() {
        final String name = "pendingReview";
        return kb.getSlot(name);
    }

    /********* Utility methods ************/

    public String getProtegeName(Ontology_Component ontoComp) {
        if (ontoComp instanceof AbstractWrappedInstance) {
            return ((AbstractWrappedInstance) ontoComp).getName();
        }
        return null;
    }
}
