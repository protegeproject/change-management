package edu.stanford.bmir.protegex.chao.change.api;

import java.util.ArrayList;
import java.util.Collection;

import edu.stanford.bmir.protegex.chao.change.api.impl.DefaultAnnotation_Added;
import edu.stanford.bmir.protegex.chao.change.api.impl.DefaultAnnotation_Change;
import edu.stanford.bmir.protegex.chao.change.api.impl.DefaultAnnotation_Modified;
import edu.stanford.bmir.protegex.chao.change.api.impl.DefaultAnnotation_Removed;
import edu.stanford.bmir.protegex.chao.change.api.impl.DefaultClass_Created;
import edu.stanford.bmir.protegex.chao.change.api.impl.DefaultClass_Deleted;
import edu.stanford.bmir.protegex.chao.change.api.impl.DefaultComposite_Change;
import edu.stanford.bmir.protegex.chao.change.api.impl.DefaultCreated_Change;
import edu.stanford.bmir.protegex.chao.change.api.impl.DefaultDeleted_Change;
import edu.stanford.bmir.protegex.chao.change.api.impl.DefaultDirectType_Added;
import edu.stanford.bmir.protegex.chao.change.api.impl.DefaultDirectType_Removed;
import edu.stanford.bmir.protegex.chao.change.api.impl.DefaultDisjointClass_Added;
import edu.stanford.bmir.protegex.chao.change.api.impl.DefaultDocumentation_Added;
import edu.stanford.bmir.protegex.chao.change.api.impl.DefaultDocumentation_Removed;
import edu.stanford.bmir.protegex.chao.change.api.impl.DefaultDomainProperty_Added;
import edu.stanford.bmir.protegex.chao.change.api.impl.DefaultDomainProperty_Removed;
import edu.stanford.bmir.protegex.chao.change.api.impl.DefaultIndividual_Added;
import edu.stanford.bmir.protegex.chao.change.api.impl.DefaultIndividual_Created;
import edu.stanford.bmir.protegex.chao.change.api.impl.DefaultIndividual_Deleted;
import edu.stanford.bmir.protegex.chao.change.api.impl.DefaultIndividual_Removed;
import edu.stanford.bmir.protegex.chao.change.api.impl.DefaultMaximum_Cardinality;
import edu.stanford.bmir.protegex.chao.change.api.impl.DefaultMaximum_Value;
import edu.stanford.bmir.protegex.chao.change.api.impl.DefaultMinimum_Cardinality;
import edu.stanford.bmir.protegex.chao.change.api.impl.DefaultMinimum_Value;
import edu.stanford.bmir.protegex.chao.change.api.impl.DefaultName_Changed;
import edu.stanford.bmir.protegex.chao.change.api.impl.DefaultProperty_Change;
import edu.stanford.bmir.protegex.chao.change.api.impl.DefaultProperty_Created;
import edu.stanford.bmir.protegex.chao.change.api.impl.DefaultProperty_Deleted;
import edu.stanford.bmir.protegex.chao.change.api.impl.DefaultProperty_Value;
import edu.stanford.bmir.protegex.chao.change.api.impl.DefaultSubclass_Added;
import edu.stanford.bmir.protegex.chao.change.api.impl.DefaultSubclass_Removed;
import edu.stanford.bmir.protegex.chao.change.api.impl.DefaultSubproperty_Added;
import edu.stanford.bmir.protegex.chao.change.api.impl.DefaultSubproperty_Removed;
import edu.stanford.bmir.protegex.chao.change.api.impl.DefaultSuperclass_Added;
import edu.stanford.bmir.protegex.chao.change.api.impl.DefaultSuperclass_Removed;
import edu.stanford.bmir.protegex.chao.change.api.impl.DefaultSuperproperty_Added;
import edu.stanford.bmir.protegex.chao.change.api.impl.DefaultSuperproperty_Removed;
import edu.stanford.bmir.protegex.chao.change.api.impl.DefaultTemplateSlot_Added;
import edu.stanford.bmir.protegex.chao.change.api.impl.DefaultTemplateSlot_Removed;
import edu.stanford.smi.protege.code.generator.wrapping.OntologyJavaMappingUtil;
import edu.stanford.smi.protege.model.Cls;
import edu.stanford.smi.protege.model.Instance;
import edu.stanford.smi.protege.model.KnowledgeBase;
import edu.stanford.smi.protege.model.Slot;

/**
 * Generated by Protege (http://protege.stanford.edu).
 *
 * @version generated on Mon Aug 18 21:13:43 GMT-08:00 2008
 */
public class ChangeFactory {
    static { OntologyJavaMapping.initMap(); }

    private KnowledgeBase kb;

    public ChangeFactory(KnowledgeBase kb) {
        this.kb = kb;
    }


    // ***** Class Annotation_Added *****

    public Cls getAnnotation_AddedClass() {
        final String name = "Annotation_Added";
        return kb.getCls(name);
    }

    public Annotation_Added createAnnotation_Added(String name) {
        Cls cls = getAnnotation_AddedClass();
        Instance inst = cls.createDirectInstance(name);
        return new DefaultAnnotation_Added(inst);
    }

    public Annotation_Added getAnnotation_Added(String name) {
        return OntologyJavaMappingUtil.getSpecificObject(kb, kb.getInstance(name), Annotation_Added.class);
    }

    public Collection<Annotation_Added> getAllAnnotation_AddedObjects() {
        return getAllAnnotation_AddedObjects(false);
    }

    public Collection<Annotation_Added> getAllAnnotation_AddedObjects(boolean transitive) {
        Collection<Annotation_Added> result = new ArrayList<Annotation_Added>();
        final Cls cls = getAnnotation_AddedClass();
        for (Object element : transitive ? cls.getInstances() : cls.getDirectInstances()) {
            Instance inst = (Instance) element;
            result.add(OntologyJavaMappingUtil.getSpecificObject(kb, inst, Annotation_Added.class));
        }
        return result;
    }


    // ***** Class Annotation_Change *****

    public Cls getAnnotation_ChangeClass() {
        final String name = "Annotation_Change";
        return kb.getCls(name);
    }

    public Annotation_Change createAnnotation_Change(String name) {
        Cls cls = getAnnotation_ChangeClass();
        Instance inst = cls.createDirectInstance(name);
        return new DefaultAnnotation_Change(inst);
    }

    public Annotation_Change getAnnotation_Change(String name) {
        return OntologyJavaMappingUtil.getSpecificObject(kb, kb.getInstance(name), Annotation_Change.class);
    }

    public Collection<Annotation_Change> getAllAnnotation_ChangeObjects() {
        return getAllAnnotation_ChangeObjects(false);
    }

    public Collection<Annotation_Change> getAllAnnotation_ChangeObjects(boolean transitive) {
        Collection<Annotation_Change> result = new ArrayList<Annotation_Change>();
        final Cls cls = getAnnotation_ChangeClass();
        for (Object element : transitive ? cls.getInstances() : cls.getDirectInstances()) {
            Instance inst = (Instance) element;
            result.add(OntologyJavaMappingUtil.getSpecificObject(kb, inst, Annotation_Change.class));
        }
        return result;
    }


    // ***** Class Annotation_Modified *****

    public Cls getAnnotation_ModifiedClass() {
        final String name = "Annotation_Modified";
        return kb.getCls(name);
    }

    public Annotation_Modified createAnnotation_Modified(String name) {
        Cls cls = getAnnotation_ModifiedClass();
        Instance inst = cls.createDirectInstance(name);
        return new DefaultAnnotation_Modified(inst);
    }

    public Annotation_Modified getAnnotation_Modified(String name) {
        return OntologyJavaMappingUtil.getSpecificObject(kb, kb.getInstance(name), Annotation_Modified.class);
    }

    public Collection<Annotation_Modified> getAllAnnotation_ModifiedObjects() {
        return getAllAnnotation_ModifiedObjects(false);
    }

    public Collection<Annotation_Modified> getAllAnnotation_ModifiedObjects(boolean transitive) {
        Collection<Annotation_Modified> result = new ArrayList<Annotation_Modified>();
        final Cls cls = getAnnotation_ModifiedClass();
        for (Object element : transitive ? cls.getInstances() : cls.getDirectInstances()) {
            Instance inst = (Instance) element;
            result.add(OntologyJavaMappingUtil.getSpecificObject(kb, inst, Annotation_Modified.class));
        }
        return result;
    }


    // ***** Class Annotation_Removed *****

    public Cls getAnnotation_RemovedClass() {
        final String name = "Annotation_Removed";
        return kb.getCls(name);
    }

    public Annotation_Removed createAnnotation_Removed(String name) {
        Cls cls = getAnnotation_RemovedClass();
        Instance inst = cls.createDirectInstance(name);
        return new DefaultAnnotation_Removed(inst);
    }

    public Annotation_Removed getAnnotation_Removed(String name) {
        return OntologyJavaMappingUtil.getSpecificObject(kb, kb.getInstance(name), Annotation_Removed.class);
    }

    public Collection<Annotation_Removed> getAllAnnotation_RemovedObjects() {
        return getAllAnnotation_RemovedObjects(false);
    }

    public Collection<Annotation_Removed> getAllAnnotation_RemovedObjects(boolean transitive) {
        Collection<Annotation_Removed> result = new ArrayList<Annotation_Removed>();
        final Cls cls = getAnnotation_RemovedClass();
        for (Object element : transitive ? cls.getInstances() : cls.getDirectInstances()) {
            Instance inst = (Instance) element;
            result.add(OntologyJavaMappingUtil.getSpecificObject(kb, inst, Annotation_Removed.class));
        }
        return result;
    }


    // ***** Class Change *****

    public Cls getChangeClass() {
        final String name = "Change";
        return kb.getCls(name);
    }

    public Change getChange(String name) {
        return OntologyJavaMappingUtil.getSpecificObject(kb, kb.getInstance(name), Change.class);
    }

    public Collection<Change> getAllChangeObjects() {
        return getAllChangeObjects(false);
    }

    public Collection<Change> getAllChangeObjects(boolean transitive) {
        Collection<Change> result = new ArrayList<Change>();
        final Cls cls = getChangeClass();
        for (Object element : transitive ? cls.getInstances() : cls.getDirectInstances()) {
            Instance inst = (Instance) element;
            result.add(OntologyJavaMappingUtil.getSpecificObject(kb, inst, Change.class));
        }
        return result;
    }


    // ***** Class Class_Change *****

    public Cls getClass_ChangeClass() {
        final String name = "Class_Change";
        return kb.getCls(name);
    }

    public Class_Change getClass_Change(String name) {
        return OntologyJavaMappingUtil.getSpecificObject(kb, kb.getInstance(name), Class_Change.class);
    }

    public Collection<Class_Change> getAllClass_ChangeObjects() {
        return getAllClass_ChangeObjects(false);
    }

    public Collection<Class_Change> getAllClass_ChangeObjects(boolean transitive) {
        Collection<Class_Change> result = new ArrayList<Class_Change>();
        final Cls cls = getClass_ChangeClass();
        for (Object element : transitive ? cls.getInstances() : cls.getDirectInstances()) {
            Instance inst = (Instance) element;
            result.add(OntologyJavaMappingUtil.getSpecificObject(kb, inst, Class_Change.class));
        }
        return result;
    }


    // ***** Class Class_Created *****

    public Cls getClass_CreatedClass() {
        final String name = "Class_Created";
        return kb.getCls(name);
    }

    public Class_Created createClass_Created(String name) {
        Cls cls = getClass_CreatedClass();
        Instance inst = cls.createDirectInstance(name);
        return new DefaultClass_Created(inst);
    }

    public Class_Created getClass_Created(String name) {
        return OntologyJavaMappingUtil.getSpecificObject(kb, kb.getInstance(name), Class_Created.class);
    }

    public Collection<Class_Created> getAllClass_CreatedObjects() {
        return getAllClass_CreatedObjects(false);
    }

    public Collection<Class_Created> getAllClass_CreatedObjects(boolean transitive) {
        Collection<Class_Created> result = new ArrayList<Class_Created>();
        final Cls cls = getClass_CreatedClass();
        for (Object element : transitive ? cls.getInstances() : cls.getDirectInstances()) {
            Instance inst = (Instance) element;
            result.add(OntologyJavaMappingUtil.getSpecificObject(kb, inst, Class_Created.class));
        }
        return result;
    }


    // ***** Class Class_Deleted *****

    public Cls getClass_DeletedClass() {
        final String name = "Class_Deleted";
        return kb.getCls(name);
    }

    public Class_Deleted createClass_Deleted(String name) {
        Cls cls = getClass_DeletedClass();
        Instance inst = cls.createDirectInstance(name);
        return new DefaultClass_Deleted(inst);
    }

    public Class_Deleted getClass_Deleted(String name) {
        return OntologyJavaMappingUtil.getSpecificObject(kb, kb.getInstance(name), Class_Deleted.class);
    }

    public Collection<Class_Deleted> getAllClass_DeletedObjects() {
        return getAllClass_DeletedObjects(false);
    }

    public Collection<Class_Deleted> getAllClass_DeletedObjects(boolean transitive) {
        Collection<Class_Deleted> result = new ArrayList<Class_Deleted>();
        final Cls cls = getClass_DeletedClass();
        for (Object element : transitive ? cls.getInstances() : cls.getDirectInstances()) {
            Instance inst = (Instance) element;
            result.add(OntologyJavaMappingUtil.getSpecificObject(kb, inst, Class_Deleted.class));
        }
        return result;
    }


    // ***** Class Composite_Change *****

    public Cls getComposite_ChangeClass() {
        final String name = "Composite_Change";
        return kb.getCls(name);
    }

    public Composite_Change createComposite_Change(String name) {
        Cls cls = getComposite_ChangeClass();
        Instance inst = cls.createDirectInstance(name);
        return new DefaultComposite_Change(inst);
    }

    public Composite_Change getComposite_Change(String name) {
        return OntologyJavaMappingUtil.getSpecificObject(kb, kb.getInstance(name), Composite_Change.class);
    }

    public Collection<Composite_Change> getAllComposite_ChangeObjects() {
        return getAllComposite_ChangeObjects(false);
    }

    public Collection<Composite_Change> getAllComposite_ChangeObjects(boolean transitive) {
        Collection<Composite_Change> result = new ArrayList<Composite_Change>();
        final Cls cls = getComposite_ChangeClass();
        for (Object element : transitive ? cls.getInstances() : cls.getDirectInstances()) {
            Instance inst = (Instance) element;
            result.add(OntologyJavaMappingUtil.getSpecificObject(kb, inst, Composite_Change.class));
        }
        return result;
    }


    // ***** Class Created_Change *****

    public Cls getCreated_ChangeClass() {
        final String name = "Created_Change";
        return kb.getCls(name);
    }

    public Created_Change createCreated_Change(String name) {
        Cls cls = getCreated_ChangeClass();
        Instance inst = cls.createDirectInstance(name);
        return new DefaultCreated_Change(inst);
    }

    public Created_Change getCreated_Change(String name) {
        return OntologyJavaMappingUtil.getSpecificObject(kb, kb.getInstance(name), Created_Change.class);
    }

    public Collection<Created_Change> getAllCreated_ChangeObjects() {
        return getAllCreated_ChangeObjects(false);
    }

    public Collection<Created_Change> getAllCreated_ChangeObjects(boolean transitive) {
        Collection<Created_Change> result = new ArrayList<Created_Change>();
        final Cls cls = getCreated_ChangeClass();
        for (Object element : transitive ? cls.getInstances() : cls.getDirectInstances()) {
            Instance inst = (Instance) element;
            result.add(OntologyJavaMappingUtil.getSpecificObject(kb, inst, Created_Change.class));
        }
        return result;
    }


    // ***** Class Deleted_Change *****

    public Cls getDeleted_ChangeClass() {
        final String name = "Deleted_Change";
        return kb.getCls(name);
    }

    public Deleted_Change createDeleted_Change(String name) {
        Cls cls = getDeleted_ChangeClass();
        Instance inst = cls.createDirectInstance(name);
        return new DefaultDeleted_Change(inst);
    }

    public Deleted_Change getDeleted_Change(String name) {
        return OntologyJavaMappingUtil.getSpecificObject(kb, kb.getInstance(name), Deleted_Change.class);
    }

    public Collection<Deleted_Change> getAllDeleted_ChangeObjects() {
        return getAllDeleted_ChangeObjects(false);
    }

    public Collection<Deleted_Change> getAllDeleted_ChangeObjects(boolean transitive) {
        Collection<Deleted_Change> result = new ArrayList<Deleted_Change>();
        final Cls cls = getDeleted_ChangeClass();
        for (Object element : transitive ? cls.getInstances() : cls.getDirectInstances()) {
            Instance inst = (Instance) element;
            result.add(OntologyJavaMappingUtil.getSpecificObject(kb, inst, Deleted_Change.class));
        }
        return result;
    }


    // ***** Class DirectType_Added *****

    public Cls getDirectType_AddedClass() {
        final String name = "DirectType_Added";
        return kb.getCls(name);
    }

    public DirectType_Added createDirectType_Added(String name) {
        Cls cls = getDirectType_AddedClass();
        Instance inst = cls.createDirectInstance(name);
        return new DefaultDirectType_Added(inst);
    }

    public DirectType_Added getDirectType_Added(String name) {
        return OntologyJavaMappingUtil.getSpecificObject(kb, kb.getInstance(name), DirectType_Added.class);
    }

    public Collection<DirectType_Added> getAllDirectType_AddedObjects() {
        return getAllDirectType_AddedObjects(false);
    }

    public Collection<DirectType_Added> getAllDirectType_AddedObjects(boolean transitive) {
        Collection<DirectType_Added> result = new ArrayList<DirectType_Added>();
        final Cls cls = getDirectType_AddedClass();
        for (Object element : transitive ? cls.getInstances() : cls.getDirectInstances()) {
            Instance inst = (Instance) element;
            result.add(OntologyJavaMappingUtil.getSpecificObject(kb, inst, DirectType_Added.class));
        }
        return result;
    }


    // ***** Class DirectType_Removed *****

    public Cls getDirectType_RemovedClass() {
        final String name = "DirectType_Removed";
        return kb.getCls(name);
    }

    public DirectType_Removed createDirectType_Removed(String name) {
        Cls cls = getDirectType_RemovedClass();
        Instance inst = cls.createDirectInstance(name);
        return new DefaultDirectType_Removed(inst);
    }

    public DirectType_Removed getDirectType_Removed(String name) {
        return OntologyJavaMappingUtil.getSpecificObject(kb, kb.getInstance(name), DirectType_Removed.class);
    }

    public Collection<DirectType_Removed> getAllDirectType_RemovedObjects() {
        return getAllDirectType_RemovedObjects(false);
    }

    public Collection<DirectType_Removed> getAllDirectType_RemovedObjects(boolean transitive) {
        Collection<DirectType_Removed> result = new ArrayList<DirectType_Removed>();
        final Cls cls = getDirectType_RemovedClass();
        for (Object element : transitive ? cls.getInstances() : cls.getDirectInstances()) {
            Instance inst = (Instance) element;
            result.add(OntologyJavaMappingUtil.getSpecificObject(kb, inst, DirectType_Removed.class));
        }
        return result;
    }


    // ***** Class DisjointClass_Added *****

    public Cls getDisjointClass_AddedClass() {
        final String name = "DisjointClass_Added";
        return kb.getCls(name);
    }

    public DisjointClass_Added createDisjointClass_Added(String name) {
        Cls cls = getDisjointClass_AddedClass();
        Instance inst = cls.createDirectInstance(name);
        return new DefaultDisjointClass_Added(inst);
    }

    public DisjointClass_Added getDisjointClass_Added(String name) {
        return OntologyJavaMappingUtil.getSpecificObject(kb, kb.getInstance(name), DisjointClass_Added.class);
    }

    public Collection<DisjointClass_Added> getAllDisjointClass_AddedObjects() {
        return getAllDisjointClass_AddedObjects(false);
    }

    public Collection<DisjointClass_Added> getAllDisjointClass_AddedObjects(boolean transitive) {
        Collection<DisjointClass_Added> result = new ArrayList<DisjointClass_Added>();
        final Cls cls = getDisjointClass_AddedClass();
        for (Object element : transitive ? cls.getInstances() : cls.getDirectInstances()) {
            Instance inst = (Instance) element;
            result.add(OntologyJavaMappingUtil.getSpecificObject(kb, inst, DisjointClass_Added.class));
        }
        return result;
    }


    // ***** Class Documentation_Added *****

    public Cls getDocumentation_AddedClass() {
        final String name = "Documentation_Added";
        return kb.getCls(name);
    }

    public Documentation_Added createDocumentation_Added(String name) {
        Cls cls = getDocumentation_AddedClass();
        Instance inst = cls.createDirectInstance(name);
        return new DefaultDocumentation_Added(inst);
    }

    public Documentation_Added getDocumentation_Added(String name) {
        return OntologyJavaMappingUtil.getSpecificObject(kb, kb.getInstance(name), Documentation_Added.class);
    }

    public Collection<Documentation_Added> getAllDocumentation_AddedObjects() {
        return getAllDocumentation_AddedObjects(false);
    }

    public Collection<Documentation_Added> getAllDocumentation_AddedObjects(boolean transitive) {
        Collection<Documentation_Added> result = new ArrayList<Documentation_Added>();
        final Cls cls = getDocumentation_AddedClass();
        for (Object element : transitive ? cls.getInstances() : cls.getDirectInstances()) {
            Instance inst = (Instance) element;
            result.add(OntologyJavaMappingUtil.getSpecificObject(kb, inst, Documentation_Added.class));
        }
        return result;
    }


    // ***** Class Documentation_Removed *****

    public Cls getDocumentation_RemovedClass() {
        final String name = "Documentation_Removed";
        return kb.getCls(name);
    }

    public Documentation_Removed createDocumentation_Removed(String name) {
        Cls cls = getDocumentation_RemovedClass();
        Instance inst = cls.createDirectInstance(name);
        return new DefaultDocumentation_Removed(inst);
    }

    public Documentation_Removed getDocumentation_Removed(String name) {
        return OntologyJavaMappingUtil.getSpecificObject(kb, kb.getInstance(name), Documentation_Removed.class);
    }

    public Collection<Documentation_Removed> getAllDocumentation_RemovedObjects() {
        return getAllDocumentation_RemovedObjects(false);
    }

    public Collection<Documentation_Removed> getAllDocumentation_RemovedObjects(boolean transitive) {
        Collection<Documentation_Removed> result = new ArrayList<Documentation_Removed>();
        final Cls cls = getDocumentation_RemovedClass();
        for (Object element : transitive ? cls.getInstances() : cls.getDirectInstances()) {
            Instance inst = (Instance) element;
            result.add(OntologyJavaMappingUtil.getSpecificObject(kb, inst, Documentation_Removed.class));
        }
        return result;
    }


    // ***** Class DomainProperty_Added *****

    public Cls getDomainProperty_AddedClass() {
        final String name = "DomainProperty_Added";
        return kb.getCls(name);
    }

    public DomainProperty_Added createDomainProperty_Added(String name) {
        Cls cls = getDomainProperty_AddedClass();
        Instance inst = cls.createDirectInstance(name);
        return new DefaultDomainProperty_Added(inst);
    }

    public DomainProperty_Added getDomainProperty_Added(String name) {
        return OntologyJavaMappingUtil.getSpecificObject(kb, kb.getInstance(name), DomainProperty_Added.class);
    }

    public Collection<DomainProperty_Added> getAllDomainProperty_AddedObjects() {
        return getAllDomainProperty_AddedObjects(false);
    }

    public Collection<DomainProperty_Added> getAllDomainProperty_AddedObjects(boolean transitive) {
        Collection<DomainProperty_Added> result = new ArrayList<DomainProperty_Added>();
        final Cls cls = getDomainProperty_AddedClass();
        for (Object element : transitive ? cls.getInstances() : cls.getDirectInstances()) {
            Instance inst = (Instance) element;
            result.add(OntologyJavaMappingUtil.getSpecificObject(kb, inst, DomainProperty_Added.class));
        }
        return result;
    }


    // ***** Class DomainProperty_Removed *****

    public Cls getDomainProperty_RemovedClass() {
        final String name = "DomainProperty_Removed";
        return kb.getCls(name);
    }

    public DomainProperty_Removed createDomainProperty_Removed(String name) {
        Cls cls = getDomainProperty_RemovedClass();
        Instance inst = cls.createDirectInstance(name);
        return new DefaultDomainProperty_Removed(inst);
    }

    public DomainProperty_Removed getDomainProperty_Removed(String name) {
        return OntologyJavaMappingUtil.getSpecificObject(kb, kb.getInstance(name), DomainProperty_Removed.class);
    }

    public Collection<DomainProperty_Removed> getAllDomainProperty_RemovedObjects() {
        return getAllDomainProperty_RemovedObjects(false);
    }

    public Collection<DomainProperty_Removed> getAllDomainProperty_RemovedObjects(boolean transitive) {
        Collection<DomainProperty_Removed> result = new ArrayList<DomainProperty_Removed>();
        final Cls cls = getDomainProperty_RemovedClass();
        for (Object element : transitive ? cls.getInstances() : cls.getDirectInstances()) {
            Instance inst = (Instance) element;
            result.add(OntologyJavaMappingUtil.getSpecificObject(kb, inst, DomainProperty_Removed.class));
        }
        return result;
    }


    // ***** Class Individual_Added *****

    public Cls getIndividual_AddedClass() {
        final String name = "Individual_Added";
        return kb.getCls(name);
    }

    public Individual_Added createIndividual_Added(String name) {
        Cls cls = getIndividual_AddedClass();
        Instance inst = cls.createDirectInstance(name);
        return new DefaultIndividual_Added(inst);
    }

    public Individual_Added getIndividual_Added(String name) {
        return OntologyJavaMappingUtil.getSpecificObject(kb, kb.getInstance(name), Individual_Added.class);
    }

    public Collection<Individual_Added> getAllIndividual_AddedObjects() {
        return getAllIndividual_AddedObjects(false);
    }

    public Collection<Individual_Added> getAllIndividual_AddedObjects(boolean transitive) {
        Collection<Individual_Added> result = new ArrayList<Individual_Added>();
        final Cls cls = getIndividual_AddedClass();
        for (Object element : transitive ? cls.getInstances() : cls.getDirectInstances()) {
            Instance inst = (Instance) element;
            result.add(OntologyJavaMappingUtil.getSpecificObject(kb, inst, Individual_Added.class));
        }
        return result;
    }


    // ***** Class Individual_Change *****

    public Cls getIndividual_ChangeClass() {
        final String name = "Individual_Change";
        return kb.getCls(name);
    }

    public Individual_Change getIndividual_Change(String name) {
        return OntologyJavaMappingUtil.getSpecificObject(kb, kb.getInstance(name), Individual_Change.class);
    }

    public Collection<Individual_Change> getAllIndividual_ChangeObjects() {
        return getAllIndividual_ChangeObjects(false);
    }

    public Collection<Individual_Change> getAllIndividual_ChangeObjects(boolean transitive) {
        Collection<Individual_Change> result = new ArrayList<Individual_Change>();
        final Cls cls = getIndividual_ChangeClass();
        for (Object element : transitive ? cls.getInstances() : cls.getDirectInstances()) {
            Instance inst = (Instance) element;
            result.add(OntologyJavaMappingUtil.getSpecificObject(kb, inst, Individual_Change.class));
        }
        return result;
    }


    // ***** Class Individual_Created *****

    public Cls getIndividual_CreatedClass() {
        final String name = "Individual_Created";
        return kb.getCls(name);
    }

    public Individual_Created createIndividual_Created(String name) {
        Cls cls = getIndividual_CreatedClass();
        Instance inst = cls.createDirectInstance(name);
        return new DefaultIndividual_Created(inst);
    }

    public Individual_Created getIndividual_Created(String name) {
        return OntologyJavaMappingUtil.getSpecificObject(kb, kb.getInstance(name), Individual_Created.class);
    }

    public Collection<Individual_Created> getAllIndividual_CreatedObjects() {
        return getAllIndividual_CreatedObjects(false);
    }

    public Collection<Individual_Created> getAllIndividual_CreatedObjects(boolean transitive) {
        Collection<Individual_Created> result = new ArrayList<Individual_Created>();
        final Cls cls = getIndividual_CreatedClass();
        for (Object element : transitive ? cls.getInstances() : cls.getDirectInstances()) {
            Instance inst = (Instance) element;
            result.add(OntologyJavaMappingUtil.getSpecificObject(kb, inst, Individual_Created.class));
        }
        return result;
    }


    // ***** Class Individual_Deleted *****

    public Cls getIndividual_DeletedClass() {
        final String name = "Individual_Deleted";
        return kb.getCls(name);
    }

    public Individual_Deleted createIndividual_Deleted(String name) {
        Cls cls = getIndividual_DeletedClass();
        Instance inst = cls.createDirectInstance(name);
        return new DefaultIndividual_Deleted(inst);
    }

    public Individual_Deleted getIndividual_Deleted(String name) {
        return OntologyJavaMappingUtil.getSpecificObject(kb, kb.getInstance(name), Individual_Deleted.class);
    }

    public Collection<Individual_Deleted> getAllIndividual_DeletedObjects() {
        return getAllIndividual_DeletedObjects(false);
    }

    public Collection<Individual_Deleted> getAllIndividual_DeletedObjects(boolean transitive) {
        Collection<Individual_Deleted> result = new ArrayList<Individual_Deleted>();
        final Cls cls = getIndividual_DeletedClass();
        for (Object element : transitive ? cls.getInstances() : cls.getDirectInstances()) {
            Instance inst = (Instance) element;
            result.add(OntologyJavaMappingUtil.getSpecificObject(kb, inst, Individual_Deleted.class));
        }
        return result;
    }


    // ***** Class Individual_Removed *****

    public Cls getIndividual_RemovedClass() {
        final String name = "Individual_Removed";
        return kb.getCls(name);
    }

    public Individual_Removed createIndividual_Removed(String name) {
        Cls cls = getIndividual_RemovedClass();
        Instance inst = cls.createDirectInstance(name);
        return new DefaultIndividual_Removed(inst);
    }

    public Individual_Removed getIndividual_Removed(String name) {
        return OntologyJavaMappingUtil.getSpecificObject(kb, kb.getInstance(name), Individual_Removed.class);
    }

    public Collection<Individual_Removed> getAllIndividual_RemovedObjects() {
        return getAllIndividual_RemovedObjects(false);
    }

    public Collection<Individual_Removed> getAllIndividual_RemovedObjects(boolean transitive) {
        Collection<Individual_Removed> result = new ArrayList<Individual_Removed>();
        final Cls cls = getIndividual_RemovedClass();
        for (Object element : transitive ? cls.getInstances() : cls.getDirectInstances()) {
            Instance inst = (Instance) element;
            result.add(OntologyJavaMappingUtil.getSpecificObject(kb, inst, Individual_Removed.class));
        }
        return result;
    }


    // ***** Class Maximum_Cardinality *****

    public Cls getMaximum_CardinalityClass() {
        final String name = "Maximum_Cardinality";
        return kb.getCls(name);
    }

    public Maximum_Cardinality createMaximum_Cardinality(String name) {
        Cls cls = getMaximum_CardinalityClass();
        Instance inst = cls.createDirectInstance(name);
        return new DefaultMaximum_Cardinality(inst);
    }

    public Maximum_Cardinality getMaximum_Cardinality(String name) {
        return OntologyJavaMappingUtil.getSpecificObject(kb, kb.getInstance(name), Maximum_Cardinality.class);
    }

    public Collection<Maximum_Cardinality> getAllMaximum_CardinalityObjects() {
        return getAllMaximum_CardinalityObjects(false);
    }

    public Collection<Maximum_Cardinality> getAllMaximum_CardinalityObjects(boolean transitive) {
        Collection<Maximum_Cardinality> result = new ArrayList<Maximum_Cardinality>();
        final Cls cls = getMaximum_CardinalityClass();
        for (Object element : transitive ? cls.getInstances() : cls.getDirectInstances()) {
            Instance inst = (Instance) element;
            result.add(OntologyJavaMappingUtil.getSpecificObject(kb, inst, Maximum_Cardinality.class));
        }
        return result;
    }


    // ***** Class Maximum_Value *****

    public Cls getMaximum_ValueClass() {
        final String name = "Maximum_Value";
        return kb.getCls(name);
    }

    public Maximum_Value createMaximum_Value(String name) {
        Cls cls = getMaximum_ValueClass();
        Instance inst = cls.createDirectInstance(name);
        return new DefaultMaximum_Value(inst);
    }

    public Maximum_Value getMaximum_Value(String name) {
        return OntologyJavaMappingUtil.getSpecificObject(kb, kb.getInstance(name), Maximum_Value.class);
    }

    public Collection<Maximum_Value> getAllMaximum_ValueObjects() {
        return getAllMaximum_ValueObjects(false);
    }

    public Collection<Maximum_Value> getAllMaximum_ValueObjects(boolean transitive) {
        Collection<Maximum_Value> result = new ArrayList<Maximum_Value>();
        final Cls cls = getMaximum_ValueClass();
        for (Object element : transitive ? cls.getInstances() : cls.getDirectInstances()) {
            Instance inst = (Instance) element;
            result.add(OntologyJavaMappingUtil.getSpecificObject(kb, inst, Maximum_Value.class));
        }
        return result;
    }


    // ***** Class Minimum_Cardinality *****

    public Cls getMinimum_CardinalityClass() {
        final String name = "Minimum_Cardinality";
        return kb.getCls(name);
    }

    public Minimum_Cardinality createMinimum_Cardinality(String name) {
        Cls cls = getMinimum_CardinalityClass();
        Instance inst = cls.createDirectInstance(name);
        return new DefaultMinimum_Cardinality(inst);
    }

    public Minimum_Cardinality getMinimum_Cardinality(String name) {
        return OntologyJavaMappingUtil.getSpecificObject(kb, kb.getInstance(name), Minimum_Cardinality.class);
    }

    public Collection<Minimum_Cardinality> getAllMinimum_CardinalityObjects() {
        return getAllMinimum_CardinalityObjects(false);
    }

    public Collection<Minimum_Cardinality> getAllMinimum_CardinalityObjects(boolean transitive) {
        Collection<Minimum_Cardinality> result = new ArrayList<Minimum_Cardinality>();
        final Cls cls = getMinimum_CardinalityClass();
        for (Object element : transitive ? cls.getInstances() : cls.getDirectInstances()) {
            Instance inst = (Instance) element;
            result.add(OntologyJavaMappingUtil.getSpecificObject(kb, inst, Minimum_Cardinality.class));
        }
        return result;
    }


    // ***** Class Minimum_Value *****

    public Cls getMinimum_ValueClass() {
        final String name = "Minimum_Value";
        return kb.getCls(name);
    }

    public Minimum_Value createMinimum_Value(String name) {
        Cls cls = getMinimum_ValueClass();
        Instance inst = cls.createDirectInstance(name);
        return new DefaultMinimum_Value(inst);
    }

    public Minimum_Value getMinimum_Value(String name) {
        return OntologyJavaMappingUtil.getSpecificObject(kb, kb.getInstance(name), Minimum_Value.class);
    }

    public Collection<Minimum_Value> getAllMinimum_ValueObjects() {
        return getAllMinimum_ValueObjects(false);
    }

    public Collection<Minimum_Value> getAllMinimum_ValueObjects(boolean transitive) {
        Collection<Minimum_Value> result = new ArrayList<Minimum_Value>();
        final Cls cls = getMinimum_ValueClass();
        for (Object element : transitive ? cls.getInstances() : cls.getDirectInstances()) {
            Instance inst = (Instance) element;
            result.add(OntologyJavaMappingUtil.getSpecificObject(kb, inst, Minimum_Value.class));
        }
        return result;
    }


    // ***** Class Name_Changed *****

    public Cls getName_ChangedClass() {
        final String name = "Name_Changed";
        return kb.getCls(name);
    }

    public Name_Changed createName_Changed(String name) {
        Cls cls = getName_ChangedClass();
        Instance inst = cls.createDirectInstance(name);
        return new DefaultName_Changed(inst);
    }

    public Name_Changed getName_Changed(String name) {
        return OntologyJavaMappingUtil.getSpecificObject(kb, kb.getInstance(name), Name_Changed.class);
    }

    public Collection<Name_Changed> getAllName_ChangedObjects() {
        return getAllName_ChangedObjects(false);
    }

    public Collection<Name_Changed> getAllName_ChangedObjects(boolean transitive) {
        Collection<Name_Changed> result = new ArrayList<Name_Changed>();
        final Cls cls = getName_ChangedClass();
        for (Object element : transitive ? cls.getInstances() : cls.getDirectInstances()) {
            Instance inst = (Instance) element;
            result.add(OntologyJavaMappingUtil.getSpecificObject(kb, inst, Name_Changed.class));
        }
        return result;
    }


    // ***** Class Property_Change *****

    public Cls getProperty_ChangeClass() {
        final String name = "Property_Change";
        return kb.getCls(name);
    }

    public Property_Change createProperty_Change(String name) {
        Cls cls = getProperty_ChangeClass();
        Instance inst = cls.createDirectInstance(name);
        return new DefaultProperty_Change(inst);
    }

    public Property_Change getProperty_Change(String name) {
        return OntologyJavaMappingUtil.getSpecificObject(kb, kb.getInstance(name), Property_Change.class);
    }

    public Collection<Property_Change> getAllProperty_ChangeObjects() {
        return getAllProperty_ChangeObjects(false);
    }

    public Collection<Property_Change> getAllProperty_ChangeObjects(boolean transitive) {
        Collection<Property_Change> result = new ArrayList<Property_Change>();
        final Cls cls = getProperty_ChangeClass();
        for (Object element : transitive ? cls.getInstances() : cls.getDirectInstances()) {
            Instance inst = (Instance) element;
            result.add(OntologyJavaMappingUtil.getSpecificObject(kb, inst, Property_Change.class));
        }
        return result;
    }


    // ***** Class Property_Created *****

    public Cls getProperty_CreatedClass() {
        final String name = "Property_Created";
        return kb.getCls(name);
    }

    public Property_Created createProperty_Created(String name) {
        Cls cls = getProperty_CreatedClass();
        Instance inst = cls.createDirectInstance(name);
        return new DefaultProperty_Created(inst);
    }

    public Property_Created getProperty_Created(String name) {
        return OntologyJavaMappingUtil.getSpecificObject(kb, kb.getInstance(name), Property_Created.class);
    }

    public Collection<Property_Created> getAllProperty_CreatedObjects() {
        return getAllProperty_CreatedObjects(false);
    }

    public Collection<Property_Created> getAllProperty_CreatedObjects(boolean transitive) {
        Collection<Property_Created> result = new ArrayList<Property_Created>();
        final Cls cls = getProperty_CreatedClass();
        for (Object element : transitive ? cls.getInstances() : cls.getDirectInstances()) {
            Instance inst = (Instance) element;
            result.add(OntologyJavaMappingUtil.getSpecificObject(kb, inst, Property_Created.class));
        }
        return result;
    }


    // ***** Class Property_Deleted *****

    public Cls getProperty_DeletedClass() {
        final String name = "Property_Deleted";
        return kb.getCls(name);
    }

    public Property_Deleted createProperty_Deleted(String name) {
        Cls cls = getProperty_DeletedClass();
        Instance inst = cls.createDirectInstance(name);
        return new DefaultProperty_Deleted(inst);
    }

    public Property_Deleted getProperty_Deleted(String name) {
        return OntologyJavaMappingUtil.getSpecificObject(kb, kb.getInstance(name), Property_Deleted.class);
    }

    public Collection<Property_Deleted> getAllProperty_DeletedObjects() {
        return getAllProperty_DeletedObjects(false);
    }

    public Collection<Property_Deleted> getAllProperty_DeletedObjects(boolean transitive) {
        Collection<Property_Deleted> result = new ArrayList<Property_Deleted>();
        final Cls cls = getProperty_DeletedClass();
        for (Object element : transitive ? cls.getInstances() : cls.getDirectInstances()) {
            Instance inst = (Instance) element;
            result.add(OntologyJavaMappingUtil.getSpecificObject(kb, inst, Property_Deleted.class));
        }
        return result;
    }


    // ***** Class Property_Value *****

    public Cls getProperty_ValueClass() {
        final String name = "Property_Value";
        return kb.getCls(name);
    }

    public Property_Value createProperty_Value(String name) {
        Cls cls = getProperty_ValueClass();
        Instance inst = cls.createDirectInstance(name);
        return new DefaultProperty_Value(inst);
    }

    public Property_Value getProperty_Value(String name) {
        return OntologyJavaMappingUtil.getSpecificObject(kb, kb.getInstance(name), Property_Value.class);
    }

    public Collection<Property_Value> getAllProperty_ValueObjects() {
        return getAllProperty_ValueObjects(false);
    }

    public Collection<Property_Value> getAllProperty_ValueObjects(boolean transitive) {
        Collection<Property_Value> result = new ArrayList<Property_Value>();
        final Cls cls = getProperty_ValueClass();
        for (Object element : transitive ? cls.getInstances() : cls.getDirectInstances()) {
            Instance inst = (Instance) element;
            result.add(OntologyJavaMappingUtil.getSpecificObject(kb, inst, Property_Value.class));
        }
        return result;
    }


    // ***** Class Subclass_Added *****

    public Cls getSubclass_AddedClass() {
        final String name = "Subclass_Added";
        return kb.getCls(name);
    }

    public Subclass_Added createSubclass_Added(String name) {
        Cls cls = getSubclass_AddedClass();
        Instance inst = cls.createDirectInstance(name);
        return new DefaultSubclass_Added(inst);
    }

    public Subclass_Added getSubclass_Added(String name) {
        return OntologyJavaMappingUtil.getSpecificObject(kb, kb.getInstance(name), Subclass_Added.class);
    }

    public Collection<Subclass_Added> getAllSubclass_AddedObjects() {
        return getAllSubclass_AddedObjects(false);
    }

    public Collection<Subclass_Added> getAllSubclass_AddedObjects(boolean transitive) {
        Collection<Subclass_Added> result = new ArrayList<Subclass_Added>();
        final Cls cls = getSubclass_AddedClass();
        for (Object element : transitive ? cls.getInstances() : cls.getDirectInstances()) {
            Instance inst = (Instance) element;
            result.add(OntologyJavaMappingUtil.getSpecificObject(kb, inst, Subclass_Added.class));
        }
        return result;
    }


    // ***** Class Subclass_Removed *****

    public Cls getSubclass_RemovedClass() {
        final String name = "Subclass_Removed";
        return kb.getCls(name);
    }

    public Subclass_Removed createSubclass_Removed(String name) {
        Cls cls = getSubclass_RemovedClass();
        Instance inst = cls.createDirectInstance(name);
        return new DefaultSubclass_Removed(inst);
    }

    public Subclass_Removed getSubclass_Removed(String name) {
        return OntologyJavaMappingUtil.getSpecificObject(kb, kb.getInstance(name), Subclass_Removed.class);
    }

    public Collection<Subclass_Removed> getAllSubclass_RemovedObjects() {
        return getAllSubclass_RemovedObjects(false);
    }

    public Collection<Subclass_Removed> getAllSubclass_RemovedObjects(boolean transitive) {
        Collection<Subclass_Removed> result = new ArrayList<Subclass_Removed>();
        final Cls cls = getSubclass_RemovedClass();
        for (Object element : transitive ? cls.getInstances() : cls.getDirectInstances()) {
            Instance inst = (Instance) element;
            result.add(OntologyJavaMappingUtil.getSpecificObject(kb, inst, Subclass_Removed.class));
        }
        return result;
    }


    // ***** Class Subproperty_Added *****

    public Cls getSubproperty_AddedClass() {
        final String name = "Subproperty_Added";
        return kb.getCls(name);
    }

    public Subproperty_Added createSubproperty_Added(String name) {
        Cls cls = getSubproperty_AddedClass();
        Instance inst = cls.createDirectInstance(name);
        return new DefaultSubproperty_Added(inst);
    }

    public Subproperty_Added getSubproperty_Added(String name) {
        return OntologyJavaMappingUtil.getSpecificObject(kb, kb.getInstance(name), Subproperty_Added.class);
    }

    public Collection<Subproperty_Added> getAllSubproperty_AddedObjects() {
        return getAllSubproperty_AddedObjects(false);
    }

    public Collection<Subproperty_Added> getAllSubproperty_AddedObjects(boolean transitive) {
        Collection<Subproperty_Added> result = new ArrayList<Subproperty_Added>();
        final Cls cls = getSubproperty_AddedClass();
        for (Object element : transitive ? cls.getInstances() : cls.getDirectInstances()) {
            Instance inst = (Instance) element;
            result.add(OntologyJavaMappingUtil.getSpecificObject(kb, inst, Subproperty_Added.class));
        }
        return result;
    }


    // ***** Class Subproperty_Removed *****

    public Cls getSubproperty_RemovedClass() {
        final String name = "Subproperty_Removed";
        return kb.getCls(name);
    }

    public Subproperty_Removed createSubproperty_Removed(String name) {
        Cls cls = getSubproperty_RemovedClass();
        Instance inst = cls.createDirectInstance(name);
        return new DefaultSubproperty_Removed(inst);
    }

    public Subproperty_Removed getSubproperty_Removed(String name) {
        return OntologyJavaMappingUtil.getSpecificObject(kb, kb.getInstance(name), Subproperty_Removed.class);
    }

    public Collection<Subproperty_Removed> getAllSubproperty_RemovedObjects() {
        return getAllSubproperty_RemovedObjects(false);
    }

    public Collection<Subproperty_Removed> getAllSubproperty_RemovedObjects(boolean transitive) {
        Collection<Subproperty_Removed> result = new ArrayList<Subproperty_Removed>();
        final Cls cls = getSubproperty_RemovedClass();
        for (Object element : transitive ? cls.getInstances() : cls.getDirectInstances()) {
            Instance inst = (Instance) element;
            result.add(OntologyJavaMappingUtil.getSpecificObject(kb, inst, Subproperty_Removed.class));
        }
        return result;
    }


    // ***** Class Superclass_Added *****

    public Cls getSuperclass_AddedClass() {
        final String name = "Superclass_Added";
        return kb.getCls(name);
    }

    public Superclass_Added createSuperclass_Added(String name) {
        Cls cls = getSuperclass_AddedClass();
        Instance inst = cls.createDirectInstance(name);
        return new DefaultSuperclass_Added(inst);
    }

    public Superclass_Added getSuperclass_Added(String name) {
        return OntologyJavaMappingUtil.getSpecificObject(kb, kb.getInstance(name), Superclass_Added.class);
    }

    public Collection<Superclass_Added> getAllSuperclass_AddedObjects() {
        return getAllSuperclass_AddedObjects(false);
    }

    public Collection<Superclass_Added> getAllSuperclass_AddedObjects(boolean transitive) {
        Collection<Superclass_Added> result = new ArrayList<Superclass_Added>();
        final Cls cls = getSuperclass_AddedClass();
        for (Object element : transitive ? cls.getInstances() : cls.getDirectInstances()) {
            Instance inst = (Instance) element;
            result.add(OntologyJavaMappingUtil.getSpecificObject(kb, inst, Superclass_Added.class));
        }
        return result;
    }


    // ***** Class Superclass_Removed *****

    public Cls getSuperclass_RemovedClass() {
        final String name = "Superclass_Removed";
        return kb.getCls(name);
    }

    public Superclass_Removed createSuperclass_Removed(String name) {
        Cls cls = getSuperclass_RemovedClass();
        Instance inst = cls.createDirectInstance(name);
        return new DefaultSuperclass_Removed(inst);
    }

    public Superclass_Removed getSuperclass_Removed(String name) {
        return OntologyJavaMappingUtil.getSpecificObject(kb, kb.getInstance(name), Superclass_Removed.class);
    }

    public Collection<Superclass_Removed> getAllSuperclass_RemovedObjects() {
        return getAllSuperclass_RemovedObjects(false);
    }

    public Collection<Superclass_Removed> getAllSuperclass_RemovedObjects(boolean transitive) {
        Collection<Superclass_Removed> result = new ArrayList<Superclass_Removed>();
        final Cls cls = getSuperclass_RemovedClass();
        for (Object element : transitive ? cls.getInstances() : cls.getDirectInstances()) {
            Instance inst = (Instance) element;
            result.add(OntologyJavaMappingUtil.getSpecificObject(kb, inst, Superclass_Removed.class));
        }
        return result;
    }


    // ***** Class Superproperty_Added *****

    public Cls getSuperproperty_AddedClass() {
        final String name = "Superproperty_Added";
        return kb.getCls(name);
    }

    public Superproperty_Added createSuperproperty_Added(String name) {
        Cls cls = getSuperproperty_AddedClass();
        Instance inst = cls.createDirectInstance(name);
        return new DefaultSuperproperty_Added(inst);
    }

    public Superproperty_Added getSuperproperty_Added(String name) {
        return OntologyJavaMappingUtil.getSpecificObject(kb, kb.getInstance(name), Superproperty_Added.class);
    }

    public Collection<Superproperty_Added> getAllSuperproperty_AddedObjects() {
        return getAllSuperproperty_AddedObjects(false);
    }

    public Collection<Superproperty_Added> getAllSuperproperty_AddedObjects(boolean transitive) {
        Collection<Superproperty_Added> result = new ArrayList<Superproperty_Added>();
        final Cls cls = getSuperproperty_AddedClass();
        for (Object element : transitive ? cls.getInstances() : cls.getDirectInstances()) {
            Instance inst = (Instance) element;
            result.add(OntologyJavaMappingUtil.getSpecificObject(kb, inst, Superproperty_Added.class));
        }
        return result;
    }


    // ***** Class Superproperty_Removed *****

    public Cls getSuperproperty_RemovedClass() {
        final String name = "Superproperty_Removed";
        return kb.getCls(name);
    }

    public Superproperty_Removed createSuperproperty_Removed(String name) {
        Cls cls = getSuperproperty_RemovedClass();
        Instance inst = cls.createDirectInstance(name);
        return new DefaultSuperproperty_Removed(inst);
    }

    public Superproperty_Removed getSuperproperty_Removed(String name) {
        return OntologyJavaMappingUtil.getSpecificObject(kb, kb.getInstance(name), Superproperty_Removed.class);
    }

    public Collection<Superproperty_Removed> getAllSuperproperty_RemovedObjects() {
        return getAllSuperproperty_RemovedObjects(false);
    }

    public Collection<Superproperty_Removed> getAllSuperproperty_RemovedObjects(boolean transitive) {
        Collection<Superproperty_Removed> result = new ArrayList<Superproperty_Removed>();
        final Cls cls = getSuperproperty_RemovedClass();
        for (Object element : transitive ? cls.getInstances() : cls.getDirectInstances()) {
            Instance inst = (Instance) element;
            result.add(OntologyJavaMappingUtil.getSpecificObject(kb, inst, Superproperty_Removed.class));
        }
        return result;
    }


    // ***** Class TemplateSlot_Added *****

    public Cls getTemplateSlot_AddedClass() {
        final String name = "TemplateSlot_Added";
        return kb.getCls(name);
    }

    public TemplateSlot_Added createTemplateSlot_Added(String name) {
        Cls cls = getTemplateSlot_AddedClass();
        Instance inst = cls.createDirectInstance(name);
        return new DefaultTemplateSlot_Added(inst);
    }

    public TemplateSlot_Added getTemplateSlot_Added(String name) {
        return OntologyJavaMappingUtil.getSpecificObject(kb, kb.getInstance(name), TemplateSlot_Added.class);
    }

    public Collection<TemplateSlot_Added> getAllTemplateSlot_AddedObjects() {
        return getAllTemplateSlot_AddedObjects(false);
    }

    public Collection<TemplateSlot_Added> getAllTemplateSlot_AddedObjects(boolean transitive) {
        Collection<TemplateSlot_Added> result = new ArrayList<TemplateSlot_Added>();
        final Cls cls = getTemplateSlot_AddedClass();
        for (Object element : transitive ? cls.getInstances() : cls.getDirectInstances()) {
            Instance inst = (Instance) element;
            result.add(OntologyJavaMappingUtil.getSpecificObject(kb, inst, TemplateSlot_Added.class));
        }
        return result;
    }


    // ***** Class TemplateSlot_Removed *****

    public Cls getTemplateSlot_RemovedClass() {
        final String name = "TemplateSlot_Removed";
        return kb.getCls(name);
    }

    public TemplateSlot_Removed createTemplateSlot_Removed(String name) {
        Cls cls = getTemplateSlot_RemovedClass();
        Instance inst = cls.createDirectInstance(name);
        return new DefaultTemplateSlot_Removed(inst);
    }

    public TemplateSlot_Removed getTemplateSlot_Removed(String name) {
        return OntologyJavaMappingUtil.getSpecificObject(kb, kb.getInstance(name), TemplateSlot_Removed.class);
    }

    public Collection<TemplateSlot_Removed> getAllTemplateSlot_RemovedObjects() {
        return getAllTemplateSlot_RemovedObjects(false);
    }

    public Collection<TemplateSlot_Removed> getAllTemplateSlot_RemovedObjects(boolean transitive) {
        Collection<TemplateSlot_Removed> result = new ArrayList<TemplateSlot_Removed>();
        final Cls cls = getTemplateSlot_RemovedClass();
        for (Object element : transitive ? cls.getInstances() : cls.getDirectInstances()) {
            Instance inst = (Instance) element;
            result.add(OntologyJavaMappingUtil.getSpecificObject(kb, inst, TemplateSlot_Removed.class));
        }
        return result;
    }


    // ***** Getter methods for slots *****

    public Slot getActionSlot() {
        final String name = "action";
        return kb.getSlot(name);
    }

    public Slot getAnnotatesSlot() {
        final String name = "annotates";
        return kb.getSlot(name);
    }

    public Slot getAssociatedAnnotationsSlot() {
        final String name = "associatedAnnotations";
        return kb.getSlot(name);
    }

    public Slot getApplyToSlot() {
        final String name = "applyTo";
        return kb.getSlot(name);
    }

    public Slot getChangesSlot() {
        final String name = "changes";
        return kb.getSlot(name);
    }

    public Slot getAssociatedPropertySlot() {
        final String name = "associatedProperty";
        return kb.getSlot(name);
    }

    public Slot getAuthorSlot() {
        final String name = "author";
        return kb.getSlot(name);
    }

    public Slot getBodySlot() {
        final String name = "body";
        return kb.getSlot(name);
    }

    public Slot getCommentSlot() {
        final String name = "comment";
        return kb.getSlot(name);
    }

    public Slot getContextSlot() {
        final String name = "context";
        return kb.getSlot(name);
    }

    public Slot getCreatedSlot() {
        final String name = "created";
        return kb.getSlot(name);
    }

    public Slot getCreationNameSlot() {
        final String name = "creationName";
        return kb.getSlot(name);
    }

    public Slot getCurrentNameSlot() {
        final String name = "currentName";
        return kb.getSlot(name);
    }

    public Slot getDateSlot() {
        final String name = "date";
        return kb.getSlot(name);
    }

    public Slot getDeletionNameSlot() {
        final String name = "deletionName";
        return kb.getSlot(name);
    }

    public Slot getInverse_of_annotatesSlot() {
        final String name = "inverse_of_annotates";
        return kb.getSlot(name);
    }

    public Slot getModifiedSlot() {
        final String name = "modified";
        return kb.getSlot(name);
    }

    public Slot getNameSlot() {
        final String name = "name";
        return kb.getSlot(name);
    }

    public Slot getNewNameSlot() {
        final String name = "newName";
        return kb.getSlot(name);
    }

    public Slot getOldNameSlot() {
        final String name = "oldName";
        return kb.getSlot(name);
    }

    public Slot getPartOfCompositeChangeSlot() {
        final String name = "partOfCompositeChange";
        return kb.getSlot(name);
    }

    public Slot getSubChangesSlot() {
        final String name = "subChanges";
        return kb.getSlot(name);
    }

    public Slot getRelatedSlot() {
        final String name = "related";
        return kb.getSlot(name);
    }

    public Slot getSequenceSlot() {
        final String name = "sequence";
        return kb.getSlot(name);
    }

    public Slot getSubjectSlot() {
        final String name = "subject";
        return kb.getSlot(name);
    }

    public Slot getTimestampSlot() {
        final String name = "timestamp";
        return kb.getSlot(name);
    }

    public Slot getTitleSlot() {
        final String name = "title";
        return kb.getSlot(name);
    }

    public Slot getVoteValueSlot() {
        final String name = "voteValue";
        return kb.getSlot(name);
    }
}
