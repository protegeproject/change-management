package edu.stanford.bmir.protegex.chao.ontologycomp.api.impl;

import edu.stanford.smi.protege.code.generator.wrapping.AbstractWrappedInstance;
import edu.stanford.smi.protege.model.*;
import java.util.*;

import edu.stanford.bmir.protegex.chao.ontologycomp.api.User;
import edu.stanford.bmir.protegex.chao.ontologycomp.api.*;

/**
 * Generated by Protege (http://protege.stanford.edu).
 * Source Class: User
 *
 * @version generated on Wed Sep 09 18:24:11 PDT 2009
 */
public class DefaultUser extends AbstractWrappedInstance
         implements User {

    public DefaultUser(Instance instance) {
        super(instance);
    }


    public DefaultUser() {
    }

    // Slot domainOfInterest

    public Collection<Ontology_Component> getDomainOfInterest() {
        Collection protegeValues = getWrappedProtegeInstance().getOwnSlotValues(getDomainOfInterestSlot());
        Collection<Ontology_Component> values = new ArrayList<Ontology_Component>();
        Cls cls = getKnowledgeBase().getCls("Ontology_Component");
        for (Object object : protegeValues) {
            if (object instanceof Instance && ((Instance)object).hasType(cls)) {
                values.add(new DefaultOntology_Component((Instance)object));
            }
        }
        return values;
    }


    public Slot getDomainOfInterestSlot() {
        final String name = "domainOfInterest";
        return getKnowledgeBase().getSlot(name);
    }


    public boolean hasDomainOfInterest() {
        return hasSlotValues(getDomainOfInterestSlot());
    }


    public void addDomainOfInterest(Ontology_Component newDomainOfInterest) {
        addSlotValue(getDomainOfInterestSlot(), newDomainOfInterest);
    }


    public void removeDomainOfInterest(Ontology_Component oldDomainOfInterest) {
        removeSlotValue(getDomainOfInterestSlot(), oldDomainOfInterest);
    }


    public void setDomainOfInterest(Collection<? extends Ontology_Component> newDomainOfInterest) {
        setSlotValues(getDomainOfInterestSlot(), newDomainOfInterest);
    }

    // Slot name

    public String getName() {
        return (String) getWrappedProtegeInstance().getOwnSlotValue(getNameSlot());
    }


    public Slot getNameSlot() {
        final String name = "name";
        return getKnowledgeBase().getSlot(name);
    }


    public boolean hasName() {
        return hasSlotValues(getNameSlot());
    }


    public void setName(String newName) {
        setSlotValue(getNameSlot(), newName);
    }

    // Slot watchedEntity

    public Collection<Ontology_Component> getWatchedEntity() {
        Collection protegeValues = getWrappedProtegeInstance().getOwnSlotValues(getWatchedEntitySlot());
        Collection<Ontology_Component> values = new ArrayList<Ontology_Component>();
        Cls cls = getKnowledgeBase().getCls("Ontology_Component");
        for (Object object : protegeValues) {
            if (object instanceof Instance && ((Instance)object).hasType(cls)) {
                values.add(new DefaultOntology_Component((Instance)object));
            }
        }
        return values;
    }


    public Slot getWatchedEntitySlot() {
        final String name = "watchedEntity";
        return getKnowledgeBase().getSlot(name);
    }


    public boolean hasWatchedEntity() {
        return hasSlotValues(getWatchedEntitySlot());
    }


    public void addWatchedEntity(Ontology_Component newWatchedEntity) {
        addSlotValue(getWatchedEntitySlot(), newWatchedEntity);
    }


    public void removeWatchedEntity(Ontology_Component oldWatchedEntity) {
        removeSlotValue(getWatchedEntitySlot(), oldWatchedEntity);
    }


    public void setWatchedEntity(Collection<? extends Ontology_Component> newWatchedEntity) {
        setSlotValues(getWatchedEntitySlot(), newWatchedEntity);
    }
}
